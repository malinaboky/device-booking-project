@using DotNetEd.CoreAdmin.ViewModels
@using Microsoft.AspNetCore.Html
@using Microsoft.AspNetCore.Mvc.Rendering;
@using Microsoft.Extensions.Primitives;
@using NonFactors.Mvc.Grid;

@model IGrid

<div id="@Model.Id" class="mvc-grid mvc-grid-header-mode" data-filter-mode="@Model.FilterMode" data-url="@Model.Url">
    <!table@(Model.Attributes)>
        <thead>
            <tr class="mvc-grid-headers mvc-grid-row-filters">
            @foreach (IGridColumn column in Model.Columns)
            {
                    if (column.Title is PropertyForFiltering)
                    {
                        var columnTitle = (PropertyForFiltering)column.Title;
                        String applied = (column.Filter.First ?? column.Filter.Second) == null ? "" : " applied";
                        <th@(column.AsAttributes()) class="@(columnTitle.Able ? "filterable sortable" : "")">
                            @{
                                Int32 size = columnTitle.Name.Length > 0 ? columnTitle.Name.Length : 20;
                                if (columnTitle.Able)
                                {
                                    <div>
                                        <input class="mvc-grid-value" size="@size" placeholder="@columnTitle.Name" tabindex="-1" readonly />
                                    </div>
                                    <button type="button" class="mvc-grid-sort"><span></span></button>
                                    <button type="button" class="mvc-grid-filter@(applied)"></button>
                                }
                                else{
                                    <span class="mvc-grid-title">@columnTitle.Name</span>
                                }
                            }
                        </th>
                    }
                    else
                    {
                        <th>
                            <span class="mvc-grid-title">@column.Title</span>
                        </th>
                    }
            }
            </tr>     
        </thead>

        <tbody>
        @foreach (IGridRow<Object> row in Model.Rows)
        {
            <!tr@(row.Attributes)>
            @foreach (IGridColumn column in Model.Columns)
            {
                String classes = (column.IsHidden ? column.CssClasses + " mvc-grid-hidden" : column.CssClasses).Trim();

                if (column.Name == "")
                {
                    <td>@column.ValueFor(row)</td>
                }
                else 
                {
                    if (String.IsNullOrEmpty(classes))
                    {
                        <td><p class="column">@column.ValueFor(row)</p></td>
                    }
                    else
                    {
                        <td class="@classes"><p>@column.ValueFor(row)</p></td>
                    }
                }
             
            }
            </!tr>
        }
        @if (!Model.Rows.Any() && Model.EmptyText != null)
        {
            <tr class="mvc-grid-empty-row">
                <td colspan="@Model.Columns.Count()">
                    @Model.EmptyText
                </td>
            </tr>
        }
        </tbody>

    @if (!String.IsNullOrEmpty(Model.FooterPartialViewName))
    {
        <tfoot>
            @await Html.PartialAsync(Model.FooterPartialViewName, Model)
        </tfoot>
    }
    </!table>
    @if (Model.Pager != null)
    {
        @await Html.PartialAsync(Model.Pager.PartialViewName, Model.Pager)
    }
</div>
