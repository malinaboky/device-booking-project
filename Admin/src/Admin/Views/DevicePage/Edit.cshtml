@using DotNetEd.CoreAdmin
@using DotNetEd.CoreAdmin.ViewModels.Device

@model DeviceToEdit

@{
    ViewData["Page_Title"] = "Редактирование устройства";
    Layout = "_CoreAdminLayout";
}

<link type="text/css" href="~/css/basicstyle.css" rel="stylesheet" />
<h1 class="display-4">Редактирование устройства</h1>


@using (Html.BeginForm("Edit", "DevicePage", FormMethod.Post, new { enctype = "multipart/form-data", @class = "add-form user-page" }))
{
    <div class="info-panel">
            <input type="hidden" name="Id" value="@Model.Id" />
            <div class="form-row">
                <div class="row-name">
                    <label>Название</label>
                </div>
                <br />
                <input type="text" class="field" asp-for="Name" name="Name" value="@Model.Name" />
                <br />
                @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="form-row">
                <div class="row-name">
                    <label>Диагональ</label>
                </div>
                <br />
                <input type="text" class="field" asp-for="Diagonal" name="Diagonal" value="@Model.Diagonal" placeholder="Десятичное число"/>
                <br />
                @Html.ValidationMessageFor(model => model.Diagonal, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="form-row">
                <div class="row-name">
                    <label>Разрешение</label>
                </div>
                <br />
                <div class="resolution">
                <input type="text" class="field hight" asp-for="Resolution.Height" name="Resolution.Height" value="@Model.Resolution.Height" placeholder="Высота" />
                <input type="text" class="field width" asp-for="Resolution.Width" name="Resolution.Width" value="@Model.Resolution.Width" placeholder="Ширина" />
                    @Html.ValidationMessageFor(model => model.Resolution.Height, "", new { @class = "text-danger resolution-text" })
                    @Html.ValidationMessageFor(model => model.Resolution.Width, "", new { @class = "text-danger resolution-text" })
                    @Html.ValidationMessageFor(model => model.Resolution,"", new { @class = "text-danger" })
                </div>
                <br />
            </div>
            <br />
            <div class="form-row">
                <div class="row-name">
                    <label>Класс</label>
                </div>
                <br />
                @Html.DropDownListFor(model => model.ClassOfDevice, ViewBag.ClassOfDevice as SelectList, new { @class = "field" } )
                <br />
                @Html.ValidationMessageFor(model => model.ClassOfDevice, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="form-row">
                <div class="row-name">
                    <label>Ос</label>
                </div>
                <br />
                @Html.DropDownListFor(model => model.OsId, ViewBag.OsId as SelectList, new { @class = "field"})
                <br />
                @Html.ValidationMessageFor(model => model.OsId, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="form-row">
                <div class="row-name">
                    <label>Департамент</label>
                </div>
                <br />
                @Html.DropDownListFor(model => model.DepartmentId, ViewBag.DepartmentId as SelectList, new { @class = "field"})
                <br />
                @Html.ValidationMessageFor(model => model.DepartmentId, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="form-row">
                <div class="row-name">
                    <label>Тип</label>
                </div>
                <br />
                @Html.DropDownListFor(model => model.TypeId, ViewBag.TypeId as SelectList, new { @class = "field"})
                <br />
                @Html.ValidationMessageFor(model => model.TypeId, "", new { @class = "text-danger" })
            </div>
            <br />
            <div class="form-row submit-panel">
                <button type="submit" class="btn btn-primary submit-button">Save</button>
                @Html.ActionLink("No, go back", "Index", "DevicePage", null, new { @class = "back-link" })
            </div>
     </div>
     <div class="image-panel">
        <div id="img-preview">
            @{
                var newPath = "http://localhost:5294" + Model.ImagePath.Replace("\\", "\\\\");
                <input type="hidden" value="@Model.ImagePath" name="ImagePath" asp-for="ImagePath"/>;
                <a title="Нажмите, для просмотра в полном размере" href="#" onclick="imageOnClick('@newPath')" class="img-link">
                    <img src="@newPath" height="200" id="old-pic" />
                </a>
            }
        </div>
        <label class="input-file" for="choose-file">
            <input type="file" name="Image" asp-for="Image" accept="image/*" data-allowed-file-extensions='["jpg", "png" , "jpeg"]' id="choose-file" />
            <span>Choose img</span>
        </label>
        @{
            <button type="button" onclick="removeNewImg()" class="delete-button">X</button>
        }
           @Html.ValidationMessageFor(model => model.Image, "", new { @class = "text-danger" })
    </div>
}

<script src="~/js/edit.js"></script>