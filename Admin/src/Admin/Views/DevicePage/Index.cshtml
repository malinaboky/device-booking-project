@using DotNetEd.CoreAdmin.ViewModels.Device
@using DotNetEd.CoreAdmin.ViewModels
@using Microsoft.AspNetCore.Html
@using NonFactors.Mvc.Grid
@using System.Linq.Expressions
@using Microsoft.EntityFrameworkCore
@using System.Data

@model DeviceList

@{
    ViewData["Page_Title"] = "Устройства";
    Layout = "_CoreAdminLayout";

    var dic = new Dictionary<long, long>();
    for (var i = 0; i < Model.Devices.Count(); i++)
        dic.Add(Model.Devices[i].Id, (long)i);
}

<link rel="stylesheet" href="~/css/style.css">

<h1 class="display-4">Устройства</h1>

@using (Html.BeginForm("DeleteAmountPost", "DevicePage", FormMethod.Post, new { @class = "add-form" }))
{
<div class="row">
    <div class="col-lg-12 my-3">
        @Html.ActionLink("Create new", "Create", "DevicePage", null, new { @class = "btn btn-primary"})
        <button type='submit' class='btn btn-primary'>Delete selected</button>
    </div>
</div>
  @(Html.Grid(Model.Devices)
                .Build((columns) =>
                {
                    columns.Add<long>(item => item.Id)
                        .Titled(new PropertyForFiltering {Able = true, Name = "Id"});
                    columns.Add<string>(item => item.Name)
                        .Titled(new PropertyForFiltering {Able = true, Name = "Name"});
                    columns.Add<double>(item => item.Diagonal)
                        .Titled(new PropertyForFiltering {Able = true, Name = "Diagonal"});
                    columns.Add<string>(item => item.Os)
                        .Titled(new PropertyForFiltering {Able = true, Name = "Os"});
                    columns.Add<HtmlString>(item => new HtmlString($"<img height='{(item.ImagePath.Contains("default") ? 50 : 100)}' src='{item.ImagePath}'>"))
                        .Titled(new PropertyForFiltering {Name = "Image"});
                    columns.Add<HtmlString>(item => new HtmlString($"<img height='{(item.QrPath.Contains("default") ? 50 : 100)}' src='{item.QrPath}'>"))
                        .Titled(new PropertyForFiltering {Name = "Qr"});

                    columns.Add(item => Html.ActionLink("Edit", "Edit", new { Id = item.Id }));
                    columns.Add(item => Html.ActionLink("Delete", "DeletePost", new { Id = item.Id }));
                    columns.Add(item => Html
                                       .CheckBoxFor(y => y.Devices[(int)dic[item.Id]].Selected, new { @id = $"Selected{dic[item.Id]}", @onclick = $"turnSelectAll({dic[item.Id]})" }))
                                           .Titled(new HtmlString("<input type=\"checkbox\" id=\"SelectAll\" onclick=\"changeAll()\">"));
                }
            )
        .Using(GridFilterMode.Header)
        .Empty("No data found")
        .Filterable()
        .Sortable()
        .Pageable()
    )
    @for (var i = 0; i < Model.Devices.Count(); i++)
    {
        @Html.HiddenFor(y => y.Devices[i].Id);
    }
} 


@section Scripts
    {
    <script src="~/js/jquery-3.5.0.js"></script>
    <script src="~/js/site.js"></script>
    <script>
        document.querySelectorAll(".mvc-grid").forEach(element => new MvcGrid(element));
    </script>
}

